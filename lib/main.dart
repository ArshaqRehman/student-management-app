import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'firestore_service.dart';
import 'firebase_options.dart'; // This will be generated by `flutterfire configure`

// The entry point of the application.
void main() async {
  // Ensure that plugin services are initialized so that `getDatabasesPath` can be used.
  WidgetsFlutterBinding.ensureInitialized();
  // Initialize Firebase
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Student Data App',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.indigo,
        scaffoldBackgroundColor: const Color(0xFFF5F5F7),
        appBarTheme: const AppBarTheme(
          backgroundColor: Colors.indigo,
          foregroundColor: Colors.white,
          elevation: 2,
          centerTitle: true,
          titleTextStyle: TextStyle(
            fontSize: 20,
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
        ),
        cardTheme: CardTheme(
          elevation: 3,
          margin: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        inputDecorationTheme: InputDecorationTheme(
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8),
            borderSide: const BorderSide(color: Colors.grey),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8),
            borderSide: const BorderSide(color: Colors.indigo, width: 2),
          ),
          labelStyle: const TextStyle(color: Colors.indigo),
        ),
      ),
      home: const HomePage(),
    );
  }
}

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Student Portal')),
      body: Container(
        width: double.infinity,
        padding: const EdgeInsets.all(24.0),
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Icon(
                Icons.school,
                size: 100,
                color: Colors.indigo.shade300,
              ),
              const SizedBox(height: 20),
              const Text(
                'Student Management System',
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 10),
              Text(
                'Manage student records with ease.',
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 16, color: Colors.grey.shade600),
              ),
              const SizedBox(height: 40),
              ElevatedButton.icon(
                onPressed: () => Navigator.push(context, MaterialPageRoute(builder: (context) => const ViewStudentPage())),
                icon: const Icon(Icons.arrow_forward),
                label: const Text('Get Started'),
                style: ElevatedButton.styleFrom(padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 15), textStyle: const TextStyle(fontSize: 16)),
              )
            ],
          ),
        ),
      ),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            const UserAccountsDrawerHeader(
              accountName: Text(
                "Arshaq Rehman",
                style:
                    TextStyle(fontWeight: FontWeight.bold, fontSize: 16, color: Colors.white),
              ),
              accountEmail: Text(
                "qarshaqq@gmail.com",
                style: TextStyle(color: Colors.white),
              ),
              currentAccountPicture: CircleAvatar(
                backgroundColor: Colors.white,
                child: Text(
                  "A",
                  style: TextStyle(fontSize: 40.0, color: Colors.indigo),
                ),
              ),
              decoration: BoxDecoration(
                color: Colors.indigo,
              ),
            ),
            ListTile(
              leading: const Icon(Icons.person_add_alt_1),
              title: const Text('Add Student Data'),
              onTap: () {
                Navigator.pop(context);
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const AddStudentPage()),
                );
              },
            ),
            ListTile(
              leading: const Icon(Icons.list_alt),
              title: const Text('View Student Data'),
              onTap: () {
                Navigator.pop(context);
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const ViewStudentPage()),
                );
              },
            ),
            const Divider(),
            ListTile(
              leading: const Icon(Icons.logout),
              title: const Text('Logout'),
              onTap: () {
                // Placeholder for logout functionality
                Navigator.pop(context);
              },
            ),
          ],
        ),
      ),
    );
  }
}

class ViewStudentPage extends StatefulWidget {
  const ViewStudentPage({super.key});

  @override
  State<ViewStudentPage> createState() => _ViewStudentPageState();
}

class _ViewStudentPageState extends State<ViewStudentPage> {
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _regNoController = TextEditingController();
  final TextEditingController _departmentController = TextEditingController();
  final TextEditingController _cgpaController = TextEditingController();
  final TextEditingController _semesterController = TextEditingController();
  final TextEditingController _advisorController = TextEditingController();

  // An instance of our FirestoreService to handle database operations.
  final FirestoreService _firestoreService = FirestoreService();

  @override
  void dispose() {
    // Clean up the controllers when the widget is disposed to prevent memory leaks.
    _nameController.dispose();
    _regNoController.dispose();
    _departmentController.dispose();
    _cgpaController.dispose();
    _semesterController.dispose();
    _advisorController.dispose();
    super.dispose();
  }

  // This function is triggered when the floating button is pressed or when an item is tapped to be edited.
  Future<void> _showFormDialog([DocumentSnapshot? documentSnapshot]) async {
    if (documentSnapshot != null) {
      // If we are editing, pre-fill the text fields with existing data.
      _nameController.text = documentSnapshot['name'] ?? '';
      _regNoController.text = documentSnapshot['regNo'] ?? '';
      _departmentController.text = documentSnapshot['department'] ?? '';
      _cgpaController.text = (documentSnapshot['cgpa'] ?? 0.0).toString();
      _semesterController.text = (documentSnapshot['semester'] ?? 0).toString();
      _advisorController.text = documentSnapshot['advisor'] ?? '';
    }

    await showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Update Student'),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(controller: _nameController, decoration: const InputDecoration(labelText: 'Name', prefixIcon: Icon(Icons.person))),
              const SizedBox(height: 8),
              TextField(controller: _regNoController, decoration: const InputDecoration(labelText: 'Reg No', prefixIcon: Icon(Icons.badge))),
              const SizedBox(height: 8),
              TextField(controller: _departmentController, decoration: const InputDecoration(labelText: 'Department', prefixIcon: Icon(Icons.business))),
              const SizedBox(height: 8),
              TextField(controller: _cgpaController, decoration: const InputDecoration(labelText: 'CGPA', prefixIcon: Icon(Icons.star)), keyboardType: const TextInputType.numberWithOptions(decimal: true)),
              const SizedBox(height: 8),
              TextField(controller: _semesterController, decoration: const InputDecoration(labelText: 'Semester', prefixIcon: Icon(Icons.timeline)), keyboardType: TextInputType.number),
              const SizedBox(height: 8),
              TextField(controller: _advisorController, decoration: const InputDecoration(labelText: 'Current Advisor', prefixIcon: Icon(Icons.support_agent))),
            ],
          ),
        ),
        actions: [
          TextButton(
            child: const Text('Cancel'),
            onPressed: () {
              _clearControllers();
              Navigator.of(context).pop();
            },
          ),
          ElevatedButton(
            child: const Text('Update'),
            onPressed: () async {
              if (documentSnapshot != null) {
                await _firestoreService.updateStudent(
                  documentSnapshot.id,
                  name: _nameController.text,
                  regNo: _regNoController.text,
                  department: _departmentController.text,
                  cgpa: double.tryParse(_cgpaController.text) ?? 0.0,
                  semester: int.tryParse(_semesterController.text) ?? 0,
                  advisor: _advisorController.text,
                );
                _clearControllers();
                if (mounted) {
                  Navigator.of(context).pop();
                }
              }
            },
          ),
        ],
      ),
    );
  }

  void _clearControllers() {
    _nameController.clear();
    _regNoController.clear();
    _departmentController.clear();
    _cgpaController.clear();
    _semesterController.clear();
    _advisorController.clear();
  }

  // Function to delete an item from Firestore.
  Future<void> _deleteStudent(String documentId) async {
    await _firestoreService.deleteStudent(documentId);
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Row(
            children: [
              Icon(Icons.delete_outline, color: Colors.white),
              SizedBox(width: 10),
              Text('Student Deleted Successfully'),
            ],
          ),
          backgroundColor: Colors.red.shade600,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12.0)),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Student Data')),
      body: StreamBuilder(
        stream: _firestoreService.getStudentsStream(),
        builder: (context, AsyncSnapshot<QuerySnapshot> streamSnapshot) {
          if (streamSnapshot.hasError) {
            return const Center(
              child: Text('Something went wrong'),
            );
          }

          if (streamSnapshot.hasData) {
            return ListView.builder(
              itemCount: streamSnapshot.data!.docs.length,
              itemBuilder: (context, index) {
                final DocumentSnapshot documentSnapshot =
                    streamSnapshot.data!.docs[index];
                return Card(
                  child: ListTile(
                    leading: CircleAvatar(
                      backgroundColor: Colors.indigo.shade100,
                      child: Text(
                        documentSnapshot['name']?.substring(0, 1) ?? '?',
                        style: const TextStyle(fontWeight: FontWeight.bold, color: Colors.indigo),
                      ),
                    ),
                    title: Text(documentSnapshot['name'] ?? 'No Name'),
                    subtitle: Text(
                        "Reg No: ${documentSnapshot['regNo'] ?? 'N/A'}\nDept: ${documentSnapshot['department'] ?? 'N/A'}"),
                    trailing: SizedBox(
                      width: 100,
                      child: Row(
                        children: [
                          IconButton(
                            icon: const Icon(Icons.edit),
                            onPressed: () => _showFormDialog(documentSnapshot),
                          ),
                          IconButton(
                            icon: const Icon(Icons.delete),
                            onPressed: () => _deleteStudent(documentSnapshot.id),
                          ),
                        ],
                      ),
                    ),
                  ),
                );
              },
            );
          }
          return const Center(child: CircularProgressIndicator());
        },
      ),
    );
  }
}

class AddStudentPage extends StatefulWidget {
  const AddStudentPage({super.key});

  @override
  State<AddStudentPage> createState() => _AddStudentPageState();
}

class _AddStudentPageState extends State<AddStudentPage> {
  final _formKey = GlobalKey<FormState>();
  final _firestoreService = FirestoreService();

  final _nameController = TextEditingController();
  final _regNoController = TextEditingController();
  final _departmentController = TextEditingController();
  final _cgpaController = TextEditingController();
  final _semesterController = TextEditingController();
  final _advisorController = TextEditingController();

  @override
  void dispose() {
    _nameController.dispose();
    _regNoController.dispose();
    _departmentController.dispose();
    _cgpaController.dispose();
    _semesterController.dispose();
    _advisorController.dispose();
    super.dispose();
  }

  Future<void> _submitData() async {
    if (_formKey.currentState!.validate()) {
      await _firestoreService.addStudent(
        name: _nameController.text,
        regNo: _regNoController.text,
        department: _departmentController.text,
        cgpa: double.tryParse(_cgpaController.text) ?? 0.0,
        semester: int.tryParse(_semesterController.text) ?? 0,
        advisor: _advisorController.text,
      );

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Row(
              children: [
                Icon(Icons.check_circle_outline, color: Colors.white),
                SizedBox(width: 10),
                Text('Student Added Successfully!'),
              ],
            ),
            backgroundColor: Colors.green.shade600,
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12.0)),
          ),
        );
        _formKey.currentState!.reset();
        _nameController.clear();
        _regNoController.clear();
        _departmentController.clear();
        _cgpaController.clear();
        _semesterController.clear();
        _advisorController.clear();
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Add New Student')),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                TextFormField(controller: _nameController, decoration: const InputDecoration(labelText: 'Student Name', prefixIcon: Icon(Icons.person_outline)), validator: (v) => v!.isEmpty ? 'Required' : null),
                const SizedBox(height: 12),
                TextFormField(controller: _regNoController, decoration: const InputDecoration(labelText: 'Student Reg No', prefixIcon: Icon(Icons.badge_outlined)), validator: (v) => v!.isEmpty ? 'Required' : null),
                const SizedBox(height: 12),
                TextFormField(controller: _departmentController, decoration: const InputDecoration(labelText: 'Student Department', prefixIcon: Icon(Icons.business_outlined)), validator: (v) => v!.isEmpty ? 'Required' : null),
                const SizedBox(height: 12),
                TextFormField(
                    controller: _cgpaController,
                    decoration: const InputDecoration(labelText: 'Student CGPA', prefixIcon: Icon(Icons.star_outline)),
                    keyboardType:
                        const TextInputType.numberWithOptions(decimal: true),
                    validator: (v) {
                      if (v == null || v.isEmpty) return 'Required';
                      if (double.tryParse(v) == null) {
                        return 'Please enter a valid number (e.g., 3.5)';
                      }
                      return null;
                    }),
                const SizedBox(height: 12),
                TextFormField(
                    controller: _semesterController,
                    decoration: const InputDecoration(labelText: 'Student Semester', prefixIcon: Icon(Icons.timeline_outlined)),
                    keyboardType: TextInputType.number,
                    validator: (v) {
                      if (v == null || v.isEmpty) return 'Required';
                      if (int.tryParse(v) == null) {
                        return 'Please enter a whole number (e.g., 8)';
                      }
                      return null;
                    }),
                const SizedBox(height: 12),
                TextFormField(controller: _advisorController, decoration: const InputDecoration(labelText: 'Student Current Advisor', prefixIcon: Icon(Icons.support_agent_outlined)), validator: (v) => v!.isEmpty ? 'Required' : null),
                const SizedBox(height: 24),
                ElevatedButton(
                  onPressed: _submitData,
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(vertical: 16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  child: const Text('Add Student'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
